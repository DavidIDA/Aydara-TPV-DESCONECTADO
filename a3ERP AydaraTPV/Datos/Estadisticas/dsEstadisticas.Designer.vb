'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsEstadisticas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsEstadisticas
    Inherits Global.System.Data.DataSet
    
    Private tableVENTAS As VENTASDataTable
    
    Private tableDETALLE_VENTAS As DETALLE_VENTASDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                Me.InitExpressions
            End If
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VENTAS")) Is Nothing) Then
                MyBase.Tables.Add(New VENTASDataTable(ds.Tables("VENTAS")))
            End If
            If (Not (ds.Tables("DETALLE_VENTAS")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_VENTASDataTable(ds.Tables("DETALLE_VENTAS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VENTAS() As VENTASDataTable
        Get
            Return Me.tableVENTAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DETALLE_VENTAS() As DETALLE_VENTASDataTable
        Get
            Return Me.tableDETALLE_VENTAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsEstadisticas = CType(MyBase.Clone,dsEstadisticas)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("VENTAS")) Is Nothing) Then
                MyBase.Tables.Add(New VENTASDataTable(ds.Tables("VENTAS")))
            End If
            If (Not (ds.Tables("DETALLE_VENTAS")) Is Nothing) Then
                MyBase.Tables.Add(New DETALLE_VENTASDataTable(ds.Tables("DETALLE_VENTAS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVENTAS = CType(MyBase.Tables("VENTAS"),VENTASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVENTAS) Is Nothing) Then
                Me.tableVENTAS.InitVars
            End If
        End If
        Me.tableDETALLE_VENTAS = CType(MyBase.Tables("DETALLE_VENTAS"),DETALLE_VENTASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDETALLE_VENTAS) Is Nothing) Then
                Me.tableDETALLE_VENTAS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsEstadisticas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsEstadisticas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVENTAS = New VENTASDataTable(false)
        MyBase.Tables.Add(Me.tableVENTAS)
        Me.tableDETALLE_VENTAS = New DETALLE_VENTASDataTable()
        MyBase.Tables.Add(Me.tableDETALLE_VENTAS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeVENTAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDETALLE_VENTAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsEstadisticas = New dsEstadisticas()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitExpressions()
        Me.VENTAS.VENTA_TOTALColumn.Expression = "VENTA_CONTADO + VENTA_CREDITO"
        Me.VENTAS.COSTE_TOTALColumn.Expression = "COSTE_CONTADO + COSTE_CREDITO"
        Me.VENTAS.UNIDADESColumn.Expression = "UNI_CONTADO + UNI_CREDITO"
    End Sub
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub VENTASRowChangeEventHandler(ByVal sender As Object, ByVal e As VENTASRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DETALLE_VENTASRowChangeEventHandler(ByVal sender As Object, ByVal e As DETALLE_VENTASRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VENTASDataTable
        Inherits Global.System.Data.TypedTableBase(Of VENTASRow)
        
        Private columnEJERCICIO As Global.System.Data.DataColumn
        
        Private columnMES As Global.System.Data.DataColumn
        
        Private columnVENTA_CONTADO As Global.System.Data.DataColumn
        
        Private columnVENTA_CREDITO As Global.System.Data.DataColumn
        
        Private columnCOSTE_CONTADO As Global.System.Data.DataColumn
        
        Private columnCOSTE_CREDITO As Global.System.Data.DataColumn
        
        Private columnVENTA_TOTAL As Global.System.Data.DataColumn
        
        Private columnCOSTE_TOTAL As Global.System.Data.DataColumn
        
        Private columnRENT_CONTADO As Global.System.Data.DataColumn
        
        Private columnRENT_CREDITO As Global.System.Data.DataColumn
        
        Private columnRENT_TOTAL As Global.System.Data.DataColumn
        
        Private columnCOMPRA As Global.System.Data.DataColumn
        
        Private columnUNI_CONTADO As Global.System.Data.DataColumn
        
        Private columnUNI_CREDITO As Global.System.Data.DataColumn
        
        Private columnUNIDADES As Global.System.Data.DataColumn
        
        Private columnNOMBRE_MES As Global.System.Data.DataColumn
        
        Private columnUNI_COMPRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "VENTAS"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EJERCICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEJERCICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VENTA_CONTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA_CONTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VENTA_CREDITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA_CREDITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTE_CONTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTE_CONTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTE_CREDITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTE_CREDITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VENTA_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENTA_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COSTE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOSTE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RENT_CONTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRENT_CONTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RENT_CREDITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRENT_CREDITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RENT_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRENT_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNI_CONTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNI_CONTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNI_CREDITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNI_CREDITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNIDADESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDADES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBRE_MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_MES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNI_COMPRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNI_COMPRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VENTASRow
            Get
                Return CType(Me.Rows(index),VENTASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VENTASRowChanging As VENTASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VENTASRowChanged As VENTASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VENTASRowDeleting As VENTASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VENTASRowDeleted As VENTASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddVENTASRow(ByVal row As VENTASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVENTASRow( _
                    ByVal EJERCICIO As Integer,  _
                    ByVal MES As Integer,  _
                    ByVal VENTA_CONTADO As Decimal,  _
                    ByVal VENTA_CREDITO As Decimal,  _
                    ByVal COSTE_CONTADO As Double,  _
                    ByVal COSTE_CREDITO As Double,  _
                    ByVal VENTA_TOTAL As Double,  _
                    ByVal COSTE_TOTAL As Double,  _
                    ByVal RENT_CONTADO As Double,  _
                    ByVal RENT_CREDITO As Double,  _
                    ByVal RENT_TOTAL As Double,  _
                    ByVal COMPRA As Double,  _
                    ByVal UNI_CONTADO As Double,  _
                    ByVal UNI_CREDITO As Double,  _
                    ByVal UNIDADES As Double,  _
                    ByVal NOMBRE_MES As String,  _
                    ByVal UNI_COMPRA As Double) As VENTASRow
            Dim rowVENTASRow As VENTASRow = CType(Me.NewRow,VENTASRow)
            Dim columnValuesArray() As Object = New Object() {EJERCICIO, MES, VENTA_CONTADO, VENTA_CREDITO, COSTE_CONTADO, COSTE_CREDITO, VENTA_TOTAL, COSTE_TOTAL, RENT_CONTADO, RENT_CREDITO, RENT_TOTAL, COMPRA, UNI_CONTADO, UNI_CREDITO, UNIDADES, NOMBRE_MES, UNI_COMPRA}
            rowVENTASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVENTASRow)
            Return rowVENTASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVENTASRow(ByVal EJERCICIO As Integer, ByVal MES As Integer, ByVal VENTA_CONTADO As Decimal, ByVal VENTA_CREDITO As Decimal, ByVal COSTE_CONTADO As Double, ByVal COSTE_CREDITO As Double, ByVal RENT_CONTADO As Double, ByVal RENT_CREDITO As Double, ByVal RENT_TOTAL As Double, ByVal COMPRA As Double, ByVal UNI_CONTADO As Double, ByVal UNI_CREDITO As Double, ByVal NOMBRE_MES As String, ByVal UNI_COMPRA As Double) As VENTASRow
            Dim rowVENTASRow As VENTASRow = CType(Me.NewRow,VENTASRow)
            Dim columnValuesArray() As Object = New Object() {EJERCICIO, MES, VENTA_CONTADO, VENTA_CREDITO, COSTE_CONTADO, COSTE_CREDITO, Nothing, Nothing, RENT_CONTADO, RENT_CREDITO, RENT_TOTAL, COMPRA, UNI_CONTADO, UNI_CREDITO, Nothing, NOMBRE_MES, UNI_COMPRA}
            rowVENTASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVENTASRow)
            Return rowVENTASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VENTASDataTable = CType(MyBase.Clone,VENTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VENTASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEJERCICIO = MyBase.Columns("EJERCICIO")
            Me.columnMES = MyBase.Columns("MES")
            Me.columnVENTA_CONTADO = MyBase.Columns("VENTA_CONTADO")
            Me.columnVENTA_CREDITO = MyBase.Columns("VENTA_CREDITO")
            Me.columnCOSTE_CONTADO = MyBase.Columns("COSTE_CONTADO")
            Me.columnCOSTE_CREDITO = MyBase.Columns("COSTE_CREDITO")
            Me.columnVENTA_TOTAL = MyBase.Columns("VENTA_TOTAL")
            Me.columnCOSTE_TOTAL = MyBase.Columns("COSTE_TOTAL")
            Me.columnRENT_CONTADO = MyBase.Columns("RENT_CONTADO")
            Me.columnRENT_CREDITO = MyBase.Columns("RENT_CREDITO")
            Me.columnRENT_TOTAL = MyBase.Columns("RENT_TOTAL")
            Me.columnCOMPRA = MyBase.Columns("COMPRA")
            Me.columnUNI_CONTADO = MyBase.Columns("UNI_CONTADO")
            Me.columnUNI_CREDITO = MyBase.Columns("UNI_CREDITO")
            Me.columnUNIDADES = MyBase.Columns("UNIDADES")
            Me.columnNOMBRE_MES = MyBase.Columns("NOMBRE_MES")
            Me.columnUNI_COMPRA = MyBase.Columns("UNI_COMPRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEJERCICIO = New Global.System.Data.DataColumn("EJERCICIO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEJERCICIO)
            Me.columnMES = New Global.System.Data.DataColumn("MES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMES)
            Me.columnVENTA_CONTADO = New Global.System.Data.DataColumn("VENTA_CONTADO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA_CONTADO)
            Me.columnVENTA_CREDITO = New Global.System.Data.DataColumn("VENTA_CREDITO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA_CREDITO)
            Me.columnCOSTE_CONTADO = New Global.System.Data.DataColumn("COSTE_CONTADO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTE_CONTADO)
            Me.columnCOSTE_CREDITO = New Global.System.Data.DataColumn("COSTE_CREDITO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTE_CREDITO)
            Me.columnVENTA_TOTAL = New Global.System.Data.DataColumn("VENTA_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENTA_TOTAL)
            Me.columnCOSTE_TOTAL = New Global.System.Data.DataColumn("COSTE_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSTE_TOTAL)
            Me.columnRENT_CONTADO = New Global.System.Data.DataColumn("RENT_CONTADO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRENT_CONTADO)
            Me.columnRENT_CREDITO = New Global.System.Data.DataColumn("RENT_CREDITO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRENT_CREDITO)
            Me.columnRENT_TOTAL = New Global.System.Data.DataColumn("RENT_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRENT_TOTAL)
            Me.columnCOMPRA = New Global.System.Data.DataColumn("COMPRA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPRA)
            Me.columnUNI_CONTADO = New Global.System.Data.DataColumn("UNI_CONTADO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNI_CONTADO)
            Me.columnUNI_CREDITO = New Global.System.Data.DataColumn("UNI_CREDITO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNI_CREDITO)
            Me.columnUNIDADES = New Global.System.Data.DataColumn("UNIDADES", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDADES)
            Me.columnNOMBRE_MES = New Global.System.Data.DataColumn("NOMBRE_MES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_MES)
            Me.columnUNI_COMPRA = New Global.System.Data.DataColumn("UNI_COMPRA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNI_COMPRA)
            Me.columnEJERCICIO.ReadOnly = true
            Me.columnEJERCICIO.Caption = "Ejercicio"
            Me.columnMES.ReadOnly = true
            Me.columnMES.Caption = "Mes"
            Me.columnVENTA_CONTADO.ReadOnly = true
            Me.columnVENTA_CONTADO.Caption = "Vta.Contado"
            Me.columnVENTA_CREDITO.ReadOnly = true
            Me.columnVENTA_CREDITO.Caption = "Vta.Crédito"
            Me.columnCOSTE_CONTADO.ReadOnly = true
            Me.columnCOSTE_CONTADO.Caption = "Coste contado"
            Me.columnCOSTE_CREDITO.ReadOnly = true
            Me.columnCOSTE_CREDITO.Caption = "Coste crédito"
            Me.columnVENTA_TOTAL.ReadOnly = true
            Me.columnVENTA_TOTAL.Caption = "Vta.Total"
            Me.columnCOSTE_TOTAL.ReadOnly = true
            Me.columnCOSTE_TOTAL.Caption = "Coste total"
            Me.columnRENT_CONTADO.Caption = "Rent.Contado"
            Me.columnRENT_CREDITO.Caption = "Rent.Crédito"
            Me.columnRENT_TOTAL.Caption = "Rent.Total"
            Me.columnCOMPRA.Caption = "Compra"
            Me.columnUNI_CONTADO.Caption = "Uni.Contado"
            Me.columnUNI_CREDITO.Caption = "Uni.Crédito"
            Me.columnUNIDADES.ReadOnly = true
            Me.columnUNIDADES.Caption = "Uni.Total"
            Me.columnNOMBRE_MES.Caption = "Mes"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewVENTASRow() As VENTASRow
            Return CType(Me.NewRow,VENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VENTASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitExpressions()
            Me.VENTA_TOTALColumn.Expression = "VENTA_CONTADO + VENTA_CREDITO"
            Me.COSTE_TOTALColumn.Expression = "COSTE_CONTADO + COSTE_CREDITO"
            Me.UNIDADESColumn.Expression = "UNI_CONTADO + UNI_CREDITO"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VENTASRowChangedEvent) Is Nothing) Then
                RaiseEvent VENTASRowChanged(Me, New VENTASRowChangeEvent(CType(e.Row,VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VENTASRowChangingEvent) Is Nothing) Then
                RaiseEvent VENTASRowChanging(Me, New VENTASRowChangeEvent(CType(e.Row,VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VENTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent VENTASRowDeleted(Me, New VENTASRowChangeEvent(CType(e.Row,VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VENTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent VENTASRowDeleting(Me, New VENTASRowChangeEvent(CType(e.Row,VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveVENTASRow(ByVal row As VENTASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsEstadisticas = New dsEstadisticas()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VENTASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DETALLE_VENTASDataTable
        Inherits Global.System.Data.TypedTableBase(Of DETALLE_VENTASRow)
        
        Private columnTIPDOC As Global.System.Data.DataColumn
        
        Private columnIDDOC As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnTIPOCONT As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnNUMDOC As Global.System.Data.DataColumn
        
        Private columnCLIPRO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnCODREP As Global.System.Data.DataColumn
        
        Private columnCODALM As Global.System.Data.DataColumn
        
        Private columnCODART As Global.System.Data.DataColumn
        
        Private columnDESCLIN As Global.System.Data.DataColumn
        
        Private columnUNIDADES As Global.System.Data.DataColumn
        
        Private columnPRCMONEDA As Global.System.Data.DataColumn
        
        Private columnDESC1 As Global.System.Data.DataColumn
        
        Private columnDESC2 As Global.System.Data.DataColumn
        
        Private columnDESC3 As Global.System.Data.DataColumn
        
        Private columnDESC4 As Global.System.Data.DataColumn
        
        Private columnBASE As Global.System.Data.DataColumn
        
        Private columnPRCMEDIO As Global.System.Data.DataColumn
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DETALLE_VENTAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIPDOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPDOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDDOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDDOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIPOCONTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPOCONT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NUMDOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMDOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CLIPROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIPRO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CODREPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODREP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CODALMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODALM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CODARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCLINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCLIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UNIDADESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDADES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRCMONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCMONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESC2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESC3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESC4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRCMEDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRCMEDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DETALLE_VENTASRow
            Get
                Return CType(Me.Rows(index),DETALLE_VENTASRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DETALLE_VENTASRowChanging As DETALLE_VENTASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DETALLE_VENTASRowChanged As DETALLE_VENTASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DETALLE_VENTASRowDeleting As DETALLE_VENTASRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DETALLE_VENTASRowDeleted As DETALLE_VENTASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDETALLE_VENTASRow(ByVal row As DETALLE_VENTASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDETALLE_VENTASRow( _
                    ByVal TIPDOC As String,  _
                    ByVal IDDOC As Decimal,  _
                    ByVal FECHA As Date,  _
                    ByVal TIPOCONT As String,  _
                    ByVal SERIE As String,  _
                    ByVal NUMDOC As Decimal,  _
                    ByVal CLIPRO As String,  _
                    ByVal NOMBRE As String,  _
                    ByVal CODREP As String,  _
                    ByVal CODALM As String,  _
                    ByVal CODART As String,  _
                    ByVal DESCLIN As String,  _
                    ByVal UNIDADES As Double,  _
                    ByVal PRCMONEDA As Double,  _
                    ByVal DESC1 As Decimal,  _
                    ByVal DESC2 As Decimal,  _
                    ByVal DESC3 As Decimal,  _
                    ByVal DESC4 As Decimal,  _
                    ByVal BASE As Decimal,  _
                    ByVal PRCMEDIO As Double,  _
                    ByVal GRUPO As String) As DETALLE_VENTASRow
            Dim rowDETALLE_VENTASRow As DETALLE_VENTASRow = CType(Me.NewRow,DETALLE_VENTASRow)
            Dim columnValuesArray() As Object = New Object() {TIPDOC, IDDOC, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4, BASE, PRCMEDIO, GRUPO}
            rowDETALLE_VENTASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDETALLE_VENTASRow)
            Return rowDETALLE_VENTASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DETALLE_VENTASDataTable = CType(MyBase.Clone,DETALLE_VENTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DETALLE_VENTASDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTIPDOC = MyBase.Columns("TIPDOC")
            Me.columnIDDOC = MyBase.Columns("IDDOC")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnTIPOCONT = MyBase.Columns("TIPOCONT")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnNUMDOC = MyBase.Columns("NUMDOC")
            Me.columnCLIPRO = MyBase.Columns("CLIPRO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnCODREP = MyBase.Columns("CODREP")
            Me.columnCODALM = MyBase.Columns("CODALM")
            Me.columnCODART = MyBase.Columns("CODART")
            Me.columnDESCLIN = MyBase.Columns("DESCLIN")
            Me.columnUNIDADES = MyBase.Columns("UNIDADES")
            Me.columnPRCMONEDA = MyBase.Columns("PRCMONEDA")
            Me.columnDESC1 = MyBase.Columns("DESC1")
            Me.columnDESC2 = MyBase.Columns("DESC2")
            Me.columnDESC3 = MyBase.Columns("DESC3")
            Me.columnDESC4 = MyBase.Columns("DESC4")
            Me.columnBASE = MyBase.Columns("BASE")
            Me.columnPRCMEDIO = MyBase.Columns("PRCMEDIO")
            Me.columnGRUPO = MyBase.Columns("GRUPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTIPDOC = New Global.System.Data.DataColumn("TIPDOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPDOC)
            Me.columnIDDOC = New Global.System.Data.DataColumn("IDDOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDDOC)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnTIPOCONT = New Global.System.Data.DataColumn("TIPOCONT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPOCONT)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnNUMDOC = New Global.System.Data.DataColumn("NUMDOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMDOC)
            Me.columnCLIPRO = New Global.System.Data.DataColumn("CLIPRO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIPRO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnCODREP = New Global.System.Data.DataColumn("CODREP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODREP)
            Me.columnCODALM = New Global.System.Data.DataColumn("CODALM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODALM)
            Me.columnCODART = New Global.System.Data.DataColumn("CODART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODART)
            Me.columnDESCLIN = New Global.System.Data.DataColumn("DESCLIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCLIN)
            Me.columnUNIDADES = New Global.System.Data.DataColumn("UNIDADES", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDADES)
            Me.columnPRCMONEDA = New Global.System.Data.DataColumn("PRCMONEDA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCMONEDA)
            Me.columnDESC1 = New Global.System.Data.DataColumn("DESC1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC1)
            Me.columnDESC2 = New Global.System.Data.DataColumn("DESC2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC2)
            Me.columnDESC3 = New Global.System.Data.DataColumn("DESC3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC3)
            Me.columnDESC4 = New Global.System.Data.DataColumn("DESC4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC4)
            Me.columnBASE = New Global.System.Data.DataColumn("BASE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBASE)
            Me.columnPRCMEDIO = New Global.System.Data.DataColumn("PRCMEDIO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRCMEDIO)
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnTIPDOC.ReadOnly = true
            Me.columnTIPDOC.Caption = "Origen"
            Me.columnIDDOC.ReadOnly = true
            Me.columnFECHA.ReadOnly = true
            Me.columnFECHA.Caption = "Fecha"
            Me.columnTIPOCONT.ReadOnly = true
            Me.columnTIPOCONT.Caption = "Tipo contable"
            Me.columnTIPOCONT.MaxLength = 3
            Me.columnSERIE.ReadOnly = true
            Me.columnSERIE.Caption = "Serie"
            Me.columnSERIE.MaxLength = 8
            Me.columnNUMDOC.ReadOnly = true
            Me.columnNUMDOC.Caption = "NºDocumento"
            Me.columnCLIPRO.ReadOnly = true
            Me.columnCLIPRO.Caption = "Cliente/Proveedor"
            Me.columnCLIPRO.MaxLength = 8
            Me.columnNOMBRE.ReadOnly = true
            Me.columnNOMBRE.Caption = "Nombre"
            Me.columnNOMBRE.MaxLength = 100
            Me.columnCODREP.ReadOnly = true
            Me.columnCODREP.Caption = "Representante"
            Me.columnCODREP.MaxLength = 8
            Me.columnCODALM.ReadOnly = true
            Me.columnCODALM.Caption = "Almacén"
            Me.columnCODALM.MaxLength = 8
            Me.columnCODART.ReadOnly = true
            Me.columnCODART.Caption = "Artículo"
            Me.columnCODART.MaxLength = 15
            Me.columnDESCLIN.ReadOnly = true
            Me.columnDESCLIN.Caption = "Descripción"
            Me.columnDESCLIN.MaxLength = 100
            Me.columnUNIDADES.ReadOnly = true
            Me.columnUNIDADES.Caption = "Unidades"
            Me.columnPRCMONEDA.ReadOnly = true
            Me.columnPRCMONEDA.Caption = "Precio"
            Me.columnDESC1.ReadOnly = true
            Me.columnDESC1.Caption = "Dto.1"
            Me.columnDESC2.ReadOnly = true
            Me.columnDESC2.Caption = "Dto.2"
            Me.columnDESC3.ReadOnly = true
            Me.columnDESC3.Caption = "Dto.3"
            Me.columnDESC4.ReadOnly = true
            Me.columnDESC4.Caption = "Dto.4"
            Me.columnBASE.ReadOnly = true
            Me.columnBASE.Caption = "Total"
            Me.columnPRCMEDIO.ReadOnly = true
            Me.columnPRCMEDIO.Caption = "Coste"
            Me.columnGRUPO.ReadOnly = true
            Me.columnGRUPO.Caption = "Tipo"
            Me.columnGRUPO.MaxLength = 11
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDETALLE_VENTASRow() As DETALLE_VENTASRow
            Return CType(Me.NewRow,DETALLE_VENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DETALLE_VENTASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DETALLE_VENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DETALLE_VENTASRowChangedEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTASRowChanged(Me, New DETALLE_VENTASRowChangeEvent(CType(e.Row,DETALLE_VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DETALLE_VENTASRowChangingEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTASRowChanging(Me, New DETALLE_VENTASRowChangeEvent(CType(e.Row,DETALLE_VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DETALLE_VENTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTASRowDeleted(Me, New DETALLE_VENTASRowChangeEvent(CType(e.Row,DETALLE_VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DETALLE_VENTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent DETALLE_VENTASRowDeleting(Me, New DETALLE_VENTASRowChangeEvent(CType(e.Row,DETALLE_VENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDETALLE_VENTASRow(ByVal row As DETALLE_VENTASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsEstadisticas = New dsEstadisticas()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DETALLE_VENTASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VENTASRow
        Inherits Global.System.Data.DataRow
        
        Private tableVENTAS As VENTASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVENTAS = CType(Me.Table,VENTASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EJERCICIO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.EJERCICIOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EJERCICIO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.EJERCICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.MESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MES' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VENTA_CONTADO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.VENTA_CONTADOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VENTA_CONTADO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.VENTA_CONTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VENTA_CREDITO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.VENTA_CREDITOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VENTA_CREDITO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.VENTA_CREDITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTE_CONTADO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.COSTE_CONTADOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COSTE_CONTADO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.COSTE_CONTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTE_CREDITO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.COSTE_CREDITOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COSTE_CREDITO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.COSTE_CREDITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VENTA_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.VENTA_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VENTA_TOTAL' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.VENTA_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COSTE_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.COSTE_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COSTE_TOTAL' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.COSTE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RENT_CONTADO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.RENT_CONTADOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RENT_CONTADO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.RENT_CONTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RENT_CREDITO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.RENT_CREDITOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RENT_CREDITO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.RENT_CREDITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RENT_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.RENT_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RENT_TOTAL' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.RENT_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COMPRA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.COMPRAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COMPRA' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNI_CONTADO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.UNI_CONTADOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNI_CONTADO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.UNI_CONTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNI_CREDITO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.UNI_CREDITOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNI_CREDITO' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.UNI_CREDITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNIDADES() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.UNIDADESColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDADES' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.UNIDADESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.NOMBRE_MESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE_MES' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.NOMBRE_MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNI_COMPRA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVENTAS.UNI_COMPRAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNI_COMPRA' de la tabla 'VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVENTAS.UNI_COMPRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEJERCICIONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.EJERCICIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEJERCICIONull()
            Me(Me.tableVENTAS.EJERCICIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMESNull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.MESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMESNull()
            Me(Me.tableVENTAS.MESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVENTA_CONTADONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.VENTA_CONTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVENTA_CONTADONull()
            Me(Me.tableVENTAS.VENTA_CONTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVENTA_CREDITONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.VENTA_CREDITOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVENTA_CREDITONull()
            Me(Me.tableVENTAS.VENTA_CREDITOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTE_CONTADONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.COSTE_CONTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTE_CONTADONull()
            Me(Me.tableVENTAS.COSTE_CONTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTE_CREDITONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.COSTE_CREDITOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTE_CREDITONull()
            Me(Me.tableVENTAS.COSTE_CREDITOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVENTA_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.VENTA_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVENTA_TOTALNull()
            Me(Me.tableVENTAS.VENTA_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOSTE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.COSTE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOSTE_TOTALNull()
            Me(Me.tableVENTAS.COSTE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRENT_CONTADONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.RENT_CONTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRENT_CONTADONull()
            Me(Me.tableVENTAS.RENT_CONTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRENT_CREDITONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.RENT_CREDITOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRENT_CREDITONull()
            Me(Me.tableVENTAS.RENT_CREDITOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRENT_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.RENT_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRENT_TOTALNull()
            Me(Me.tableVENTAS.RENT_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOMPRANull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.COMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOMPRANull()
            Me(Me.tableVENTAS.COMPRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUNI_CONTADONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.UNI_CONTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUNI_CONTADONull()
            Me(Me.tableVENTAS.UNI_CONTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUNI_CREDITONull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.UNI_CREDITOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUNI_CREDITONull()
            Me(Me.tableVENTAS.UNI_CREDITOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUNIDADESNull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.UNIDADESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUNIDADESNull()
            Me(Me.tableVENTAS.UNIDADESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOMBRE_MESNull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.NOMBRE_MESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOMBRE_MESNull()
            Me(Me.tableVENTAS.NOMBRE_MESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUNI_COMPRANull() As Boolean
            Return Me.IsNull(Me.tableVENTAS.UNI_COMPRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUNI_COMPRANull()
            Me(Me.tableVENTAS.UNI_COMPRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DETALLE_VENTASRow
        Inherits Global.System.Data.DataRow
        
        Private tableDETALLE_VENTAS As DETALLE_VENTASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDETALLE_VENTAS = CType(Me.Table,DETALLE_VENTASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIPDOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.TIPDOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPDOC' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.TIPDOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDDOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.IDDOCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDDOC' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.IDDOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIPOCONT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.TIPOCONTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPOCONT' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.TIPOCONTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SERIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.SERIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SERIE' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NUMDOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.NUMDOCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NUMDOC' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.NUMDOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CLIPRO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.CLIPROColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLIPRO' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.CLIPROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CODREP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.CODREPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODREP' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.CODREPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CODALM() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.CODALMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODALM' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.CODALMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CODART() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.CODARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODART' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.CODARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCLIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.DESCLINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCLIN' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.DESCLINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UNIDADES() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.UNIDADESColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDADES' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.UNIDADESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRCMONEDA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.PRCMONEDAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRCMONEDA' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.PRCMONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESC1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.DESC1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC1' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.DESC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESC2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.DESC2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC2' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.DESC2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESC3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.DESC3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC3' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.DESC3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESC4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.DESC4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC4' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.DESC4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BASE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.BASEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BASE' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.BASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRCMEDIO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.PRCMEDIOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRCMEDIO' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.PRCMEDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDETALLE_VENTAS.GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GRUPO' de la tabla 'DETALLE_VENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDETALLE_VENTAS.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTIPDOCNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.TIPDOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTIPDOCNull()
            Me(Me.tableDETALLE_VENTAS.TIPDOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDDOCNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.IDDOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDDOCNull()
            Me(Me.tableDETALLE_VENTAS.IDDOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFECHANull()
            Me(Me.tableDETALLE_VENTAS.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTIPOCONTNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.TIPOCONTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTIPOCONTNull()
            Me(Me.tableDETALLE_VENTAS.TIPOCONTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSERIENull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.SERIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSERIENull()
            Me(Me.tableDETALLE_VENTAS.SERIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNUMDOCNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.NUMDOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNUMDOCNull()
            Me(Me.tableDETALLE_VENTAS.NUMDOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCLIPRONull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.CLIPROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCLIPRONull()
            Me(Me.tableDETALLE_VENTAS.CLIPROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOMBRENull()
            Me(Me.tableDETALLE_VENTAS.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCODREPNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.CODREPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCODREPNull()
            Me(Me.tableDETALLE_VENTAS.CODREPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCODALMNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.CODALMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCODALMNull()
            Me(Me.tableDETALLE_VENTAS.CODALMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCODARTNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.CODARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCODARTNull()
            Me(Me.tableDETALLE_VENTAS.CODARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESCLINNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.DESCLINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESCLINNull()
            Me(Me.tableDETALLE_VENTAS.DESCLINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUNIDADESNull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.UNIDADESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUNIDADESNull()
            Me(Me.tableDETALLE_VENTAS.UNIDADESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRCMONEDANull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.PRCMONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRCMONEDANull()
            Me(Me.tableDETALLE_VENTAS.PRCMONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESC1Null() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.DESC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESC1Null()
            Me(Me.tableDETALLE_VENTAS.DESC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESC2Null() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.DESC2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESC2Null()
            Me(Me.tableDETALLE_VENTAS.DESC2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESC3Null() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.DESC3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESC3Null()
            Me(Me.tableDETALLE_VENTAS.DESC3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESC4Null() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.DESC4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESC4Null()
            Me(Me.tableDETALLE_VENTAS.DESC4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBASENull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.BASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBASENull()
            Me(Me.tableDETALLE_VENTAS.BASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRCMEDIONull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.PRCMEDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRCMEDIONull()
            Me(Me.tableDETALLE_VENTAS.PRCMEDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableDETALLE_VENTAS.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGRUPONull()
            Me(Me.tableDETALLE_VENTAS.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class VENTASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VENTASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As VENTASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As VENTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DETALLE_VENTASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DETALLE_VENTASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DETALLE_VENTASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DETALLE_VENTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsEstadisticasTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VENTASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VENTAS"
            tableMapping.ColumnMappings.Add("EJERCICIO", "EJERCICIO")
            tableMapping.ColumnMappings.Add("MES", "MES")
            tableMapping.ColumnMappings.Add("VENTA_CONTADO", "VENTA_CONTADO")
            tableMapping.ColumnMappings.Add("COSTE_CONTADO", "COSTE_CONTADO")
            tableMapping.ColumnMappings.Add("COSTE_CREDITO", "COSTE_CREDITO")
            tableMapping.ColumnMappings.Add("VENTA_CREDITO", "VENTA_CREDITO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.a3ERP_AydaraTPV.Settings.Default.SqlConection
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(9) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) VENTA_CREDITO, SUM(UNIDADES * COSTE_CONTADO)" & _
                " AS COSTE_CONTADO, SUM(UNIDADES * COSTE_CREDITO) AS COSTE_CREDITO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         " & _
                "   (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEFACV.FECHA, TIPOCONT, SERIE, CODCLI, LINEFACT.CODREP, LI" & _
                "NEFACT.CODALM, 0 VENTA_CONTADO, LINEFACT.BASE VENTA_CREDITO, LINEFACT.UNIDADES, " & _
                "0 COSTE_CONTADO, LINEFACT.PRCMEDIO COSTE_CREDITO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACV INNER" & _
                " JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION A" & _
                "LL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEALBV.FECHA, TIPOCONT, SERIE, CODCLI, LINEALBA.CODREP, LINE" & _
                "ALBA.CODALM, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.BASE END VENTA_CONTAD" & _
                "O, CASE FACTURABLE WHEN 'T' THEN LINEALBA.BASE ELSE 0 END VENTA_CREDITO, LINEALB" & _
                "A.UNIDADES, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.PRCMEDIO END COSTE_CON" & _
                "TADO, CASE FACTURABLE WHEN 'T' THEN LINEALBA.PRCMEDIO ELSE 0 END COSTE_CREDITO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "FROM            CABEALBV INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALB" & _
                "V" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECHA)" & _
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) VENTA_CREDITO, SUM(UNI_CONTADO * PRCMEDIO) A" & _
                "S COSTE_CONTADO, SUM(UNI_CREDITO * PRCMEDIO) AS COSTE_CREDITO, SUM(COMPRA) AS CO" & _
                "MPRA, SUM(UNI_CONTADO) UNI_CONTADO, SUM(UNI_CREDITO) UNI_CREDITO, SUM(UNI_COMPRA" & _
                ") AS UNI_COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEFACV.FECHA, LINEFACT.CODAL" & _
                "M, 0 UNI_CONTADO, 0 VENTA_CONTADO, LINEFACT.UNIDADES UNI_CREDITO, LINEFACT.BASE " & _
                "VENTA_CREDITO, LINEFACT.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            " & _
                "CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABL" & _
                "E='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEALBV.FECHA, LINEALBA.CODALM, CASE FACTURABLE" & _
                " WHEN 'T' THEN 0 ELSE LINEALBA.UNIDADES END UNI_CONTADO, CASE FACTURABLE WHEN 'T" & _
                "' THEN 0 ELSE LINEALBA.BASE END VENTA_CONTADO, CASE FACTURABLE WHEN 'T' THEN LIN" & _
                "EALBA.UNIDADES ELSE 0 END UNI_CREDITO, CASE FACTURABLE WHEN 'T' THEN LINEALBA.BA" & _
                "SE ELSE 0 END VENTA_CREDITO, LINEALBA.PRCMEDIO, 0AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FRO" & _
                "M            CABEALBV INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "WHERE CABEALBV.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEALBC.FECHA, LINEALBA." & _
                "CODALM, 0 UNI_CONTADO, 0 VENTA_CONTADO, 0 UNI_CREDITO, 0 VENTA_CREDITO, 0 PRCMED" & _
                "IO, LINEALBA.UNIDADES AS UNI_COMPRA, LINEALBA.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CA" & _
                "BEALBC INNER JOIN LINEALBA ON CABEALBC.IDALBC = LINEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE  CABEALBC" & _
                ".SITUACION = 'A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEFACC.FECHA, LINEFACT.CODALM, 0 UN" & _
                "I_CONTADO, 0 VENTA_CONTADO, 0 UNI_CREDITO, 0 VENTA_CREDITO, 0 PRCMEDIO, LINEFACT" & _
                ".UNIDADES AS UNI_COMPRA, LINEFACT.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACC INNER" & _
                " JOIN LINEFACT ON CABEFACC.IDFACC = LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE = 'F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS " & _
                "VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE  CODALM = @CODALM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECHA)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) VENTA_CREDITO, SUM(UNI_CONTADO * PRCMEDIO) A" & _
                "S COSTE_CONTADO, SUM(UNI_CREDITO * PRCMEDIO) AS COSTE_CREDITO, SUM(COMPRA) AS CO" & _
                "MPRA, SUM(UNI_CONTADO) UNI_CONTADO, SUM(UNI_CREDITO) UNI_CREDITO, SUM(UNI_COMPRA" & _
                ") AS UNI_COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEFACV.FECHA, LINEFACT.CODAL" & _
                "M, LINEFACT.CODART, 0 UNI_CONTADO, 0 VENTA_CONTADO, LINEFACT.UNIDADES UNI_CREDIT" & _
                "O, LINEFACT.BASE VENTA_CREDITO, LINEFACT.PRCMEDIO, 0 UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FR" & _
                "OM            CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEALBV.FECHA, LINEALBA.CODALM, L" & _
                "INEALBA.CODART, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.UNIDADES END UNI_C" & _
                "ONTADO, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.BASE END VENTA_CONTADO, CA" & _
                "SE FACTURABLE WHEN 'T' THEN LINEALBA.UNIDADES ELSE 0 END UNI_CREDITO, CASE FACTU" & _
                "RABLE WHEN 'T' THEN LINEALBA.BASE ELSE 0 END VENTA_CREDITO, LINEALBA.PRCMEDIO, 0" & _
                " AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBV INNER JOIN LINEALBA ON CAB" & _
                "EALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBV.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT " & _
                "       CABEALBC.FECHA, LINEALBA.CODALM, LINEALBA.CODART, 0 UNI_CONTADO, 0 VENTA_" & _
                "CONTADO, 0 UNI_CREDITO, 0 VENTA_CREDITO, 0 PRCMEDIO, LINEALBA.UNIDADES AS UNI_CO" & _
                "MPRA, LINEALBA.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBC INNER JOIN LINEALBA ON C" & _
                "ABEALBC.IDALBC = LINEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBC.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T        CABEFACC.FECHA, LINEFACT.CODALM, LINEFACT.CODART, 0 UNI_CONTADO, 0 VENT" & _
                "A_CONTADO, 0 UNI_CREDITO, 0 VENTA_CREDITO, 0 PRCMEDIO, LINEFACT.UNIDADES AS UNI_" & _
                "COMPRA, LINEFACT.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACC INNER JOIN LINEFACT ON" & _
                " CABEFACC.IDFACC = LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE = 'F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE COD" & _
                "ART = @CODART AND (CODALM = @CODALM OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         @CODALM = '')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "GROUP BY YEAR(FECHA), MONTH(FECHA)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODART", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "CODART", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) AS VENTA_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                        " & _
                " SUM(UNI_CONTADO * PRCMEDIO) AS COSTE_CONTADO, SUM(UNI_CREDITO * PRCMEDIO) AS CO" & _
                "STE_CREDITO, SUM(COMPRA) AS COMPRA, SUM(UNI_CONTADO) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         " & _
                "AS UNI_CONTADO, SUM(UNI_CREDITO) AS UNI_CREDITO, SUM(UNI_COMPRA) AS UNI_COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "FROM            (SELECT        CABEFACV.FECHA, LINEFACT.CODALM, LINEFACT.CODART," & _
                " 0 AS UNI_CONTADO, 0 AS VENTA_CONTADO, LINEFACT.UNIDADES AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "     " & _
                "                                               LINEFACT.BASE AS VENTA_CREDITO, L" & _
                "INEFACT.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM  " & _
                "          CABEFACV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                 " & _
                "   LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHER" & _
                "E        (CABEFACV.CONTABLE = 'F') AND (LTRIM(CABEFACV.SERIE) <> '6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "         " & _
                "                 UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT        CABEALBV.FEC" & _
                "HA, LINEALBA.CODALM, LINEALBA.CODART, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEA" & _
                "LBA.UNIDADES END AS UNI_CONTADO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                             " & _
                "      CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.BASE END AS VENTA_CONTADO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   CASE FACTURABLE WHEN 'T' THE" & _
                "N LINEALBA.UNIDADES ELSE 0 END AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                               " & _
                "                    CASE FACTURABLE WHEN 'T' THEN LINEALBA.BASE ELSE 0 END AS VE" & _
                "NTA_CREDITO, LINEALBA.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                  " & _
                "        FROM            CABEALBV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                   " & _
                "                LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                 " & _
                "         WHERE        (CABEALBV.SITUACION = 'A') AND (LTRIM(CABEALBV.SERIE) <> '" & _
                "6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT      " & _
                "  CABEALBC.FECHA, LINEALBA.CODALM, LINEALBA.CODART, 0 AS UNI_CONTADO, 0 AS VENTA" & _
                "_CONTADO, 0 AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                  " & _
                " 0 AS VENTA_CREDITO, 0 AS PRCMEDIO, LINEALBA.UNIDADES AS UNI_COMPRA, LINEALBA.BA" & _
                "SE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABEALBC INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                                                LINEALBA ON CABEALBC.IDALBC = LI" & _
                "NEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        CABEALBC.SITUACION='A' AND" & _
                " (LTRIM(CABEALBC.CODPRO) <> '911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "        " & _
                "                 SELECT        CABEFACC.FECHA, LINEFACT.CODALM, LINEFACT.CODART," & _
                " 0 UNI_CONTADO, 0 VENTA_CONTADO, 0 UNI_CREDITO, 0 VENTA_CREDITO, 0 PRCMEDIO, LIN" & _
                "EFACT.UNIDADES AS UNI_COMPRA, LINEFACT.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         " & _
                "FROM            CABEFACC INNER JOIN LINEFACT ON CABEFACC.IDFACC = LINEFACT.IDFAC" & _
                "C" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         WHERE CONTABLE = 'F' AND (LTRIM(CABEFACC.CODPRO) <> " & _
                "'911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (CODART = @CODART) AND (CODALM = @CODALM OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " " & _
                "                        @CODALM = '')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECHA)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODART", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "CODART", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) VENTA_CREDITO, SUM(UNI_CONTADO * PRCMEDIO) A" & _
                "S COSTE_CONTADO, SUM(UNI_CREDITO * PRCMEDIO) AS COSTE_CREDITO, 0 AS COMPRA, SUM(" & _
                "UNI_CONTADO) UNI_CONTADO, SUM(UNI_CREDITO) UNI_CREDITO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T        TIPOCONT, CABEFACV.FECHA, CABEFACV.CODCLI, 0 UNI_CONTADO, 0 VENTA_CONTA" & _
                "DO, LINEFACT.UNIDADES UNI_CREDITO, LINEFACT.BASE VENTA_CREDITO, LINEFACT.PRCMEDI" & _
                "O" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.ID" & _
                "FACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE='F' " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        TIPOCONT, CABEALBV.FECHA, CA" & _
                "BEALBV.CODCLI, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.UNIDADES END UNI_CO" & _
                "NTADO, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.BASE END VENTA_CONTADO, CAS" & _
                "E FACTURABLE WHEN 'T' THEN LINEALBA.UNIDADES ELSE 0 END UNI_CREDITO, CASE FACTUR" & _
                "ABLE WHEN 'T' THEN LINEALBA.BASE ELSE 0 END VENTA_CREDITO, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FR" & _
                "OM            CABEALBV INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CODCLI = @CODCLI AND LTRIM(TIP" & _
                "OCONT)<>'2'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECHA)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODCLI", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODCLI", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        YEAR(VENTAS.FECHA) AS EJERCICIO, MONTH(VENTAS.FECHA) AS MES, SUM(VE" & _
                "NTAS.VENTA_CONTADO) AS VENTA_CONTADO, SUM(VENTAS.VENTA_CREDITO) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "              " & _
                "           AS VENTA_CREDITO, SUM(VENTAS.UNI_CONTADO * VENTAS.PRCMEDIO) AS COSTE_" & _
                "CONTADO, SUM(VENTAS.UNI_CREDITO * VENTAS.PRCMEDIO) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         AS" & _
                " COSTE_CREDITO, SUM(VENTAS.COMPRA) AS COMPRA, SUM(VENTAS.UNI_CONTADO) AS UNI_CON" & _
                "TADO, SUM(VENTAS.UNI_CREDITO) AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         SUM(VEN" & _
                "TAS.UNI_COMPRA) AS UNI_COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (SELECT        CABEFACV.FECHA, LI" & _
                "NEFACT.CODALM, LINEFACT.CODART, 0 AS UNI_CONTADO, 0 AS VENTA_CONTADO, LINEFACT.U" & _
                "NIDADES AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                    LI" & _
                "NEFACT.BASE AS VENTA_CREDITO, LINEFACT.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " " & _
                "                         FROM            CABEFACV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                  " & _
                "                                  LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        (CABEFACV.CONTABLE = 'F')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "             " & _
                "             UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT        CABEALBV.FECHA, " & _
                "LINEALBA.CODALM, LINEALBA.CODART, CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA." & _
                "UNIDADES END AS UNI_CONTADO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                 " & _
                "  CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.BASE END AS VENTA_CONTADO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                                                CASE FACTURABLE WHEN 'T' THEN LI" & _
                "NEALBA.UNIDADES ELSE 0 END AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                   " & _
                "                CASE FACTURABLE WHEN 'T' THEN LINEALBA.BASE ELSE 0 END AS VENTA_" & _
                "CREDITO, LINEALBA.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      " & _
                "    FROM            CABEALBV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                       " & _
                "            LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "     WHERE        (CABEALBV.SITUACION = 'A')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION AL" & _
                "L" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT        CABEALBC.FECHA, LINEALBA_1.CODALM, LI" & _
                "NEALBA_1.CODART, 0 AS UNI_CONTADO, 0 AS VENTA_CONTADO, 0 AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "     " & _
                "                                              0 AS VENTA_CREDITO, 0 AS PRCMEDIO," & _
                " LINEALBA_1.UNIDADES AS UNI_COMPRA, LINEALBA_1.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                 " & _
                "         FROM            CABEALBC INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                  " & _
                "                 LINEALBA AS LINEALBA_1 ON CABEALBC.IDALBC = LINEALBA_1.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "                          WHERE        (CABEALBC.SITUACION = 'A')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "             " & _
                "             UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT        CABEFACC.FECHA, " & _
                "LINEFACT_1.CODALM, LINEFACT_1.CODART, 0 AS UNI_CONTADO, 0 AS VENTA_CONTADO, 0 AS" & _
                " UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   0 AS VENTA_CR" & _
                "EDITO, 0 AS PRCMEDIO, LINEFACT_1.UNIDADES AS UNI_COMPRA, LINEFACT_1.BASE AS COMP" & _
                "RA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABEFACC INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "             " & _
                "                                      LINEFACT AS LINEFACT_1 ON CABEFACC.IDFACC " & _
                "= LINEFACT_1.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        (CABEFACC.CONTABLE =" & _
                " 'F')) AS VENTAS INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         ARTICULO ON ARTICULO.CODAR" & _
                "T = VENTAS.CODART INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         FAMILIAS ON ARTICULO.CODF" & _
                "AMEST = FAMILIAS.CODFAM AND FAMILIAS.FICHERO = 'Estadis' LEFT OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "      " & _
                "                   SIE_ESTRUCTURASFAMILIAARTICULO ON FAMILIAS.ID = SIE_ESTRUCTUR" & _
                "ASFAMILIAARTICULO.ID_FAMILIAHIJA LEFT OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         FAMIL" & _
                "IAS AS FamiliaPadre ON FamiliaPadre.ID = SIE_ESTRUCTURASFAMILIAARTICULO.ID_FAMIL" & _
                "IAPADRE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (VENTAS.CODALM = @CODALM) AND (FAMILIAS.CODFAM = @CODFAM) " & _
                "OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (VENTAS.CODALM = @CODALM) AND (FamiliaPadre.CODFAM " & _
                "= @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (FAMILIAS.CODFAM = @CODFAM) AND (@CODALM" & _
                " = '') OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (FamiliaPadre.CODFAM = @CODFAM) AND (@CODALM" & _
                " = '')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(VENTAS.FECHA), MONTH(VENTAS.FECHA)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODFAM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODFAM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) AS VENTA_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                        " & _
                " SUM(UNI_CONTADO * VENTAS.PRCMEDIO) AS COSTE_CONTADO, SUM(UNI_CREDITO * VENTAS.P" & _
                "RCMEDIO) AS COSTE_CREDITO, SUM(COMPRA) AS COMPRA, SUM(UNI_CONTADO) " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "           " & _
                "              AS UNI_CONTADO, SUM(UNI_CREDITO) AS UNI_CREDITO, SUM(UNI_COMPRA) A" & _
                "S UNI_COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (SELECT        CABEFACV.FECHA, LINEFACT.CODALM, LI" & _
                "NEFACT.CODART, 0 AS UNI_CONTADO, 0 AS VENTA_CONTADO, LINEFACT.UNIDADES AS UNI_CR" & _
                "EDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                    LINEFACT.BASE AS VE" & _
                "NTA_CREDITO, LINEFACT.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                  " & _
                "        FROM            CABEFACV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                   " & _
                "                 LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                " & _
                "          WHERE        (CABEFACV.CONTABLE = 'F') AND (LTRIM(CABEFACV.SERIE) <> '" & _
                "6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT      " & _
                "  CABEALBV.FECHA, LINEALBA.CODALM, LINEALBA.CODART, CASE FACTURABLE WHEN 'T' THE" & _
                "N 0 ELSE LINEALBA.UNIDADES END AS UNI_CONTADO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                               " & _
                "                    CASE FACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.BASE END AS VE" & _
                "NTA_CONTADO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   CASE FACTURABL" & _
                "E WHEN 'T' THEN LINEALBA.UNIDADES ELSE 0 END AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                 " & _
                "                                  CASE FACTURABLE WHEN 'T' THEN LINEALBA.BASE EL" & _
                "SE 0 END AS VENTA_CREDITO, LINEALBA.PRCMEDIO, 0 AS UNI_COMPRA, 0 AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "    " & _
                "                      FROM            CABEALBV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "                              LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                       WHERE        (CABEALBV.SITUACION = 'A') AND (LTRIM(CABEAL" & _
                "BV.SERIE) <> '6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                        " & _
                "  SELECT        CABEALBC.FECHA, LINEALBA.CODALM, LINEALBA.CODART, 0 AS UNI_CONTA" & _
                "DO, 0 AS VENTA_CONTADO, 0 AS UNI_CREDITO, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                    " & _
                "               0 AS VENTA_CREDITO, 0 AS PRCMEDIO, LINEALBA.UNIDADES AS UNI_COMPR" & _
                "A, LINEALBA.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABEALBC I" & _
                "NNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEALBA ON CABEAL" & _
                "BC.IDALBC = LINEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        CABEALBC.SIT" & _
                "UACION='A' AND (LTRIM(CABEALBC.CODPRO) <> '911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         UNION" & _
                " ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         SELECT        CABEFACC.FECHA, LINEFACT.CODALM, LI" & _
                "NEFACT.CODART, 0 UNI_CONTADO, 0 VENTA_CONTADO, 0 UNI_CREDITO, 0 VENTA_CREDITO, 0" & _
                " PRCMEDIO, LINEFACT.UNIDADES AS UNI_COMPRA, LINEFACT.BASE AS COMPRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "           " & _
                "              FROM            CABEFACC INNER JOIN LINEFACT ON CABEFACC.IDFACC = " & _
                "LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         WHERE CONTABLE = 'F' AND (LTRIM(CABEFA" & _
                "CC.CODPRO) <> '911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         ARTICULO " & _
                "ON ARTICULO.CODART = VENTAS.CODART INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         FAMILIAS" & _
                " ON ARTICULO.CODFAMEST = FAMILIAS.CODFAM AND FAMILIAS.FICHERO = 'Estadis' LEFT O" & _
                "UTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         SIE_ESTRUCTURASFAMILIAARTICULO ON FAMILIAS.I" & _
                "D = SIE_ESTRUCTURASFAMILIAARTICULO.ID_FAMILIAHIJA LEFT OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "             " & _
                "            FAMILIAS AS FamiliaPadre ON FamiliaPadre.ID = SIE_ESTRUCTURASFAMILIA" & _
                "ARTICULO.ID_FAMILIAPADRE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (VENTAS.CODALM = @CODALM) AND (FAMILIAS.C" & _
                "ODFAM = @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (VENTAS.CODALM = @CODALM) AND (Fam" & _
                "iliaPadre.CODFAM = @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (FAMILIAS.CODFAM = @COD" & _
                "FAM) AND (@CODALM = '') OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (FamiliaPadre.CODFAM = @COD" & _
                "FAM) AND (@CODALM = '')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECHA)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODFAM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODFAM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT EJERCICIO, MES, SUM(BASE) AS COMPRA, 0 COSTE_CONTADO, 0 COSTE_CREDITO, 0 V" & _
                "ENTA_CONTADO, 0 VENTA_CREDITO, 0 UNI_CONTADO, 0 UNI_CREDITO " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "(" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT   " & _
                "     CODPRO, YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, BASE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM CABEALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SITUACION = 'A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CODPRO, YEAR(FECHA) AS EJERCICI" & _
                "O, MONTH(FECHA) AS MES, BASE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM CABEFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE = 'F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS COMPRAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CODPRO = @CODPRO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY EJERCICIO, MES"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODPRO", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODPRO", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) VENTA_CREDITO, SUM(UNI_CONTADO * PRCMEDIO) A" & _
                "S COSTE_CONTADO, SUM(UNI_CREDITO * PRCMEDIO) AS COSTE_CREDITO, 0 AS COMPRA, SUM(" & _
                "UNI_CONTADO) UNI_CONTADO, SUM(UNI_CREDITO) UNI_CREDITO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T        CABEFACV.FECHA, LINEFACT.CODREP, 0 UNI_CONTADO, 0 VENTA_CONTADO, LINEFA" & _
                "CT.UNIDADES UNI_CREDITO, LINEFACT.BASE VENTA_CREDITO, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM   " & _
                "         CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHER" & _
                "E CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEALBV.FECHA, LINEALBA.CODREP, CASE F" & _
                "ACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.UNIDADES END UNI_CONTADO, CASE FACTURABL" & _
                "E WHEN 'T' THEN 0 ELSE LINEALBA.BASE END VENTA_CONTADO, CASE FACTURABLE WHEN 'T'" & _
                " THEN LINEALBA.UNIDADES ELSE 0 END UNI_CREDITO, CASE FACTURABLE WHEN 'T' THEN LI" & _
                "NEALBA.BASE ELSE 0 END VENTA_CREDITO, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALB" & _
                "V INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUA" & _
                "CION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE  CODREP = @CODREP" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECH" & _
                "A)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODREP", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODREP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT        YEAR(FECHA) AS EJERCICIO, MONTH(FECHA) AS MES, SUM(VENTA_CONTADO) A" & _
                "S VENTA_CONTADO, SUM(VENTA_CREDITO) VENTA_CREDITO, SUM(UNI_CONTADO * PRCMEDIO) A" & _
                "S COSTE_CONTADO, SUM(UNI_CREDITO * PRCMEDIO) AS COSTE_CREDITO, 0 AS COMPRA, SUM(" & _
                "UNI_CONTADO) UNI_CONTADO, SUM(UNI_CREDITO) UNI_CREDITO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T        CABEFACV.FECHA, CABEFACV.CODCLI, 0 UNI_CONTADO, 0 VENTA_CONTADO, LINEFA" & _
                "CT.UNIDADES UNI_CREDITO, LINEFACT.BASE VENTA_CREDITO, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM   " & _
                "         CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHER" & _
                "E CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        CABEALBV.FECHA, CABEALBV.CODCLI, CASE F" & _
                "ACTURABLE WHEN 'T' THEN 0 ELSE LINEALBA.UNIDADES END UNI_CONTADO, CASE FACTURABL" & _
                "E WHEN 'T' THEN 0 ELSE LINEALBA.BASE END VENTA_CONTADO, CASE FACTURABLE WHEN 'T'" & _
                " THEN LINEALBA.UNIDADES ELSE 0 END UNI_CREDITO, CASE FACTURABLE WHEN 'T' THEN LI" & _
                "NEALBA.BASE ELSE 0 END VENTA_CREDITO, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALB" & _
                "V INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUA" & _
                "CION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "LEFT JOIN CLIENTES ON CLIENTES.CODCLI = VENTAS.CODCLI" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WH" & _
                "ERE CLIENTES.RUTA = @RUTA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY YEAR(FECHA), MONTH(FECHA)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RUTA", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsEstadisticas.VENTASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Almacen(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODALM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODALM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Artículo(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODART As String, ByVal CODALM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CODART Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODART")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODART, String)
            End If
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CODALM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function ArtículoAMM(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODART As String, ByVal CODALM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (CODART Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODART")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODART, String)
            End If
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CODALM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Cliente(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODCLI As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (CODCLI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODCLI")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODCLI, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Familia(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODALM As String, ByVal CODFAM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODALM, String)
            End If
            If (CODFAM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODFAM")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CODFAM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FamiliaAMM(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODALM As String, ByVal CODFAM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODALM, String)
            End If
            If (CODFAM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODFAM")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CODFAM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Proveedor(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODPRO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (CODPRO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODPRO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODPRO, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Representante(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal CODREP As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (CODREP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODREP, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Ruta(ByVal dataTable As dsEstadisticas.VENTASDataTable, ByVal RUTA1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (RUTA1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RUTA1, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class DETALLE_VENTASTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DETALLE_VENTAS"
            tableMapping.ColumnMappings.Add("TIPDOC", "TIPDOC")
            tableMapping.ColumnMappings.Add("IDDOC", "IDDOC")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("TIPOCONT", "TIPOCONT")
            tableMapping.ColumnMappings.Add("SERIE", "SERIE")
            tableMapping.ColumnMappings.Add("NUMDOC", "NUMDOC")
            tableMapping.ColumnMappings.Add("CLIPRO", "CLIPRO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("CODREP", "CODREP")
            tableMapping.ColumnMappings.Add("CODALM", "CODALM")
            tableMapping.ColumnMappings.Add("CODART", "CODART")
            tableMapping.ColumnMappings.Add("DESCLIN", "DESCLIN")
            tableMapping.ColumnMappings.Add("UNIDADES", "UNIDADES")
            tableMapping.ColumnMappings.Add("PRCMONEDA", "PRCMONEDA")
            tableMapping.ColumnMappings.Add("DESC1", "DESC1")
            tableMapping.ColumnMappings.Add("DESC2", "DESC2")
            tableMapping.ColumnMappings.Add("DESC3", "DESC3")
            tableMapping.ColumnMappings.Add("DESC4", "DESC4")
            tableMapping.ColumnMappings.Add("BASE", "BASE")
            tableMapping.ColumnMappings.Add("PRCMEDIO", "PRCMEDIO")
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.a3ERP_AydaraTPV.Settings.Default.SqlConection
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(9) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4" & _
                ", BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'FV' AS TIPDOC, 'Vta.Credito' " & _
                "AS GRUPO, CABEFACV.IDFACV AS IDDOC, CABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, COD" & _
                "CLI CLIPRO, NOMCLI NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, LI" & _
                "NEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT." & _
                "DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM   " & _
                "         CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHER" & _
                "E CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T'" & _
                " THEN 'Vta.Credito' ELSE 'Contado' END AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABEA" & _
                "LBV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI CLIPRO, NOMCLI NOMBRE, LINEALBA.CODRE" & _
                "P, LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEAL" & _
                "BA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, LI" & _
                "NEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBV INNER JOIN LINEALBA ON " & _
                "CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELE" & _
                "CT       'FC' AS TIPDOC, 'Compras' AS GRUPO, CABEFACC.IDFACC AS IDDOC, CABEFACC." & _
                "FECHA, TIPOCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO NOMBRE, LINEFACT.CODREP, L" & _
                "INEFACT.CODALM, LINEFACT.CODART, LINEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.P" & _
                "RCMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFA" & _
                "CT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACC INNER JOIN LINEFACT ON CABE" & _
                "FACC.IDFACC = LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE YEAR(FECHA" & _
                ") = @EJERCICIO AND MONTH(FECHA) = @MES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4" & _
                ", BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        'FV' AS TIPDOC, 'Vta.Credito'" & _
                " AS GRUPO, CABEFACV.IDFACV AS IDDOC, CABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, CO" & _
                "DCLI CLIPRO, NOMCLI NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, L" & _
                "INEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT" & _
                ".DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM  " & _
                "          CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHE" & _
                "RE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T" & _
                "' THEN 'Vta.Credito' ELSE 'Contado' END AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABE" & _
                "ALBV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI CLIPRO, NOMCLI NOMBRE, LINEALBA.CODR" & _
                "EP, LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEA" & _
                "LBA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, L" & _
                "INEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBV INNER JOIN LINEALBA ON" & _
                " CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBV.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SEL" & _
                "ECT       'AC' AS TIPDOC, 'Compras' AS GRUPO, CABEALBC.IDALBC AS IDDOC, CABEALBC" & _
                ".FECHA, TIPOCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO NOMBRE, LINEALBA.CODREP, " & _
                "LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEALBA." & _
                "PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, LINEA" & _
                "LBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBC INNER JOIN LINEALBA ON CAB" & _
                "EALBC.IDALBC = LINEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBC.SITUACION = 'A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T       'FC' AS TIPDOC, 'Compras' AS GRUPO, CABEFACC.IDFACC AS IDDOC, CABEFACC.F" & _
                "ECHA, TIPOCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO NOMBRE, LINEFACT.CODREP, LI" & _
                "NEFACT.CODALM, LINEFACT.CODART, LINEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PR" & _
                "CMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFAC" & _
                "T.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACC INNER JOIN LINEFACT ON CABEF" & _
                "ACC.IDFACC = LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE = 'F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE YEAR(FECH" & _
                "A) = @EJERCICIO AND MONTH(FECHA) = @MES AND CODALM = @CODALM"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4" & _
                ", BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        'FV' AS TIPDOC, 'Vta.Credito'" & _
                " AS GRUPO, CABEFACV.IDFACV AS IDDOC, CABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, CO" & _
                "DCLI CLIPRO, NOMCLI NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, L" & _
                "INEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT" & _
                ".DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM  " & _
                "          CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHE" & _
                "RE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T" & _
                "' THEN 'Vta.Credito' ELSE 'Contado' END AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABE" & _
                "ALBV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI CLIPRO, NOMCLI NOMBRE, LINEALBA.CODR" & _
                "EP, LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEA" & _
                "LBA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, L" & _
                "INEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBV INNER JOIN LINEALBA ON" & _
                " CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBV.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SEL" & _
                "ECT       'AC' AS TIPDOC, 'Compras' AS GRUPO, CABEALBC.IDALBC AS IDDOC, CABEALBC" & _
                ".FECHA, TIPOCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO NOMBRE, LINEALBA.CODREP, " & _
                "LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEALBA." & _
                "PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, LINEA" & _
                "LBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBC INNER JOIN LINEALBA ON CAB" & _
                "EALBC.IDALBC = LINEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBC.SITUACION = 'A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELEC" & _
                "T       'FC' AS TIPDOC, 'Compras' AS GRUPO, CABEFACC.IDFACC AS IDDOC, CABEFACC.F" & _
                "ECHA, TIPOCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO NOMBRE, LINEFACT.CODREP, LI" & _
                "NEFACT.CODALM, LINEFACT.CODART, LINEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PR" & _
                "CMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFAC" & _
                "T.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACC INNER JOIN LINEFACT ON CABEF" & _
                "ACC.IDFACC = LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE = 'F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE YEAR(FECH" & _
                "A) = @EJERCICIO AND MONTH(FECHA) = @MES AND CODART = @CODART AND (CODALM = @CODA" & _
                "LM OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         @CODALM = '')"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODART", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "CODART", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4" & _
                ", BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        'FV' AS TIPDOC, 'Vta.Credito'" & _
                " AS GRUPO, CABEFACV.IDFACV AS IDDOC, CABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, CO" & _
                "DCLI CLIPRO, NOMCLI NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, L" & _
                "INEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT" & _
                ".DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM  " & _
                "          CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHE" & _
                "RE CONTABLE='F' AND (LTRIM(CABEFACV.SERIE) <> '6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AV'" & _
                " AS TIPDOC, CASE FACTURABLE WHEN 'T' THEN 'Vta.Credito' ELSE 'Contado' END AS GR" & _
                "UPO, CABEALBV.IDALBV AS IDDOC, CABEALBV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI C" & _
                "LIPRO, NOMCLI NOMBRE, LINEALBA.CODREP, LINEALBA.CODALM, LINEALBA.CODART, LINEALB" & _
                "A.DESCLIN, LINEALBA.UNIDADES, LINEALBA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2" & _
                ", LINEALBA.DESC3, LINEALBA.DESC4, LINEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM        " & _
                "    CABEALBV INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LIN" & _
                "EALBA.SITUACION='A' AND (LTRIM(CABEALBV.SERIE) <> '6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT      '" & _
                "AC' AS TIPDOC, 'Compras' AS GRUPO, CABEALBC.IDALBC AS IDDOC, CABEALBC.FECHA, TIP" & _
                "OCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO NOMBRE, LINEALBA.CODREP, LINEALBA.CO" & _
                "DALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEALBA.PRCMONEDA, " & _
                "LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, LINEALBA.BASE, L" & _
                "INEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBC INNER JOIN LINEALBA ON CABEALBC.IDALB" & _
                "C = LINEALBA.IDALBC " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CABEALBC.SITUACION = 'A' AND (LTRIM(CABEALBC.CODPRO)" & _
                " <> '911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT      'FC' AS TIPDOC, 'Compras' AS GRUPO, CABEFACC." & _
                "IDFACC AS IDDOC, CABEFACC.FECHA, TIPOCONT, SERIE, NUMDOC, CODPRO CLIPRO, NOMPRO " & _
                "NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, LINEFACT.DESCLIN, LIN" & _
                "EFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DES" & _
                "C3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACC I" & _
                "NNER JOIN LINEFACT ON CABEFACC.IDFACC = LINEFACT.IDFACC " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE = 'F' A" & _
                "ND (LTRIM(CABEFACC.CODPRO) <> '911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE YEAR(FECHA) = @EJERCICI" & _
                "O AND MONTH(FECHA) = @MES AND CODART = @CODART AND (CODALM = @CODALM OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "       " & _
                "                  @CODALM = '')"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODART", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "CODART", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4" & _
                ", BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        'FV' AS TIPDOC, 'Vta.Credito'" & _
                " AS GRUPO, CABEFACV.IDFACV AS IDDOC, CABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, CO" & _
                "DCLI CLIPRO, NOMCLI NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, L" & _
                "INEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT" & _
                ".DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM  " & _
                "          CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHE" & _
                "RE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T" & _
                "' THEN 'Vta.Credito' ELSE 'Contado' END AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABE" & _
                "ALBV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI CLIPRO, NOMCLI NOMBRE, LINEALBA.CODR" & _
                "EP, LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEA" & _
                "LBA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, L" & _
                "INEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBV INNER JOIN LINEALBA ON" & _
                " CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "W" & _
                "HERE YEAR(FECHA) = @EJERCICIO AND MONTH(FECHA) = @MES AND CLIPRO = @CODCLI AND L" & _
                "TRIM(TIPOCONT) <> '2'"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODCLI", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIPRO", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        VENTAS.TIPDOC, VENTAS.IDDOC, VENTAS.GRUPO, VENTAS.FECHA, VENTAS.TIP" & _
                "OCONT, VENTAS.SERIE, VENTAS.NUMDOC, VENTAS.CLIPRO, VENTAS.NOMBRE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "            " & _
                "             VENTAS.CODREP, VENTAS.CODALM, VENTAS.CODART, VENTAS.DESCLIN, VENTAS" & _
                ".UNIDADES, VENTAS.PRCMONEDA, VENTAS.DESC1, VENTAS.DESC2, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "    VENTAS.DESC3, VENTAS.DESC4, VENTAS.BASE, VENTAS.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (S" & _
                "ELECT        'FV' AS TIPDOC, 'Vta.Credito' AS GRUPO, CABEFACV.IDFACV AS IDDOC, C" & _
                "ABEFACV.FECHA, CABEFACV.TIPOCONT, CABEFACV.SERIE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                            " & _
                "                        CABEFACV.NUMDOC, CABEFACV.CODCLI AS CLIPRO, CABEFACV.NOM" & _
                "CLI AS NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "            " & _
                "                                        LINEFACT.DESCLIN, LINEFACT.UNIDADES, LIN" & _
                "EFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DESC3, LINEFACT.DESC4," & _
                " " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                    LINEFACT.BASE, LINEFACT.P" & _
                "RCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABEFACV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "        " & _
                "                                            LINEFACT ON CABEFACV.IDFACV = LINEFA" & _
                "CT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        (CABEFACV.CONTABLE = 'F')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "   " & _
                "                       UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT        'AV' A" & _
                "S TIPDOC, CASE FACTURABLE WHEN 'T' THEN 'Vta.Credito' ELSE 'Contado' END AS GRUP" & _
                "O, CABEALBV.IDALBV AS IDDOC, CABEALBV.FECHA, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                 " & _
                "                  CABEALBV.TIPOCONT, CABEALBV.SERIE, CABEALBV.NUMDOC, CABEALBV.C" & _
                "ODCLI AS CLIPRO, CABEALBV.NOMCLI AS NOMBRE, LINEALBA.CODREP, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                 " & _
                "                                  LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DES" & _
                "CLIN, LINEALBA.UNIDADES, LINEALBA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " " & _
                "                                                  LINEALBA.DESC3, LINEALBA.DESC4" & _
                ", LINEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CA" & _
                "BEALBV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEALBA O" & _
                "N CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        (CAB" & _
                "EALBV.SITUACION = 'A')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                   " & _
                "       SELECT        'AC' AS TIPDOC, 'Compras' AS GRUPO, CABEALBC.IDALBC AS IDDO" & _
                "C, CABEALBC.FECHA, CABEALBC.TIPOCONT, CABEALBC.SERIE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                        " & _
                "                           CABEALBC.NUMDOC, CABEALBC.CODPRO AS CLIPRO, CABEALBC." & _
                "NOMPRO AS NOMBRE, LINEALBA_1.CODREP, LINEALBA_1.CODALM, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                      " & _
                "                             LINEALBA_1.CODART, LINEALBA_1.DESCLIN, LINEALBA_1.U" & _
                "NIDADES, LINEALBA_1.PRCMONEDA, LINEALBA_1.DESC1, LINEALBA_1.DESC2, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "           " & _
                "                                        LINEALBA_1.DESC3, LINEALBA_1.DESC4, LINE" & _
                "ALBA_1.BASE, LINEALBA_1.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABE" & _
                "ALBC INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEALBA AS " & _
                "LINEALBA_1 ON CABEALBC.IDALBC = LINEALBA_1.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHE" & _
                "RE        (CABEALBC.SITUACION = 'A')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "     " & _
                "                     SELECT        'FC' AS TIPDOC, 'Compras' AS GRUPO, CABEFACC." & _
                "IDFACC AS IDDOC, CABEFACC.FECHA, CABEFACC.TIPOCONT, CABEFACC.SERIE, CABEFACC.NUM" & _
                "DOC, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   CABEFACC.CODPRO AS CLI" & _
                "PRO, CABEFACC.NOMPRO AS NOMBRE, LINEFACT_1.CODREP, LINEFACT_1.CODALM, LINEFACT_1" & _
                ".CODART, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEFACT_1.DESCLIN" & _
                ", LINEFACT_1.UNIDADES, LINEFACT_1.PRCMONEDA, LINEFACT_1.DESC1, LINEFACT_1.DESC2," & _
                " LINEFACT_1.DESC3, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEFACT" & _
                "_1.DESC4, LINEFACT_1.BASE, LINEFACT_1.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM  " & _
                "          CABEFACC INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                 " & _
                "  LINEFACT AS LINEFACT_1 ON CABEFACC.IDFACC = LINEFACT_1.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "               " & _
                "           WHERE        (CABEFACC.CONTABLE = 'F')) AS VENTAS INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "       " & _
                "                  ARTICULO ON ARTICULO.CODART = VENTAS.CODART INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "      " & _
                "                   FAMILIAS ON ARTICULO.CODFAMEST = FAMILIAS.CODFAM AND FAMILIAS" & _
                ".FICHERO = 'Estadis' LEFT OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         SIE_ESTRUCTURASFA" & _
                "MILIAARTICULO ON FAMILIAS.ID = SIE_ESTRUCTURASFAMILIAARTICULO.ID_FAMILIAHIJA LEF" & _
                "T OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         FAMILIAS AS FamiliaPadre ON FamiliaPadre." & _
                "ID = SIE_ESTRUCTURASFAMILIAARTICULO.ID_FAMILIAPADRE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (YEAR(VENTAS.F" & _
                "ECHA) = @EJERCICIO) AND (MONTH(VENTAS.FECHA) = @MES) AND (VENTAS.CODALM = @CODAL" & _
                "M) AND (FAMILIAS.CODFAM = @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (YEAR(VENTAS.FEC" & _
                "HA) = @EJERCICIO) AND (MONTH(VENTAS.FECHA) = @MES) AND (VENTAS.CODALM = @CODALM)" & _
                " AND (FamiliaPadre.CODFAM = @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (YEAR(VENTAS.F" & _
                "ECHA) = @EJERCICIO) AND (MONTH(VENTAS.FECHA) = @MES) AND (FAMILIAS.CODFAM = @COD" & _
                "FAM) AND (@CODALM = '') OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (YEAR(VENTAS.FECHA) = @EJER" & _
                "CICIO) AND (MONTH(VENTAS.FECHA) = @MES) AND (FamiliaPadre.CODFAM = @CODFAM) AND " & _
                "(@CODALM = '')"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODFAM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODFAM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT        VENTAS.TIPDOC, VENTAS.IDDOC, VENTAS.GRUPO, VENTAS.FECHA, VENTAS.TIP" & _
                "OCONT, VENTAS.SERIE, VENTAS.NUMDOC, VENTAS.CLIPRO, VENTAS.NOMBRE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "            " & _
                "             VENTAS.CODREP, VENTAS.CODALM, VENTAS.CODART, VENTAS.DESCLIN, VENTAS" & _
                ".UNIDADES, VENTAS.PRCMONEDA, VENTAS.DESC1, VENTAS.DESC2, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "    VENTAS.DESC3, VENTAS.DESC4, VENTAS.BASE, VENTAS.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (S" & _
                "ELECT        'FV' AS TIPDOC, 'Vta.Credito' AS GRUPO, CABEFACV.IDFACV AS IDDOC, C" & _
                "ABEFACV.FECHA, CABEFACV.TIPOCONT, CABEFACV.SERIE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                            " & _
                "                        CABEFACV.NUMDOC, CABEFACV.CODCLI AS CLIPRO, CABEFACV.NOM" & _
                "CLI AS NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "            " & _
                "                                        LINEFACT.DESCLIN, LINEFACT.UNIDADES, LIN" & _
                "EFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DESC3, LINEFACT.DESC4," & _
                " " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                    LINEFACT.BASE, LINEFACT.P" & _
                "RCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABEFACV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "        " & _
                "                                            LINEFACT ON CABEFACV.IDFACV = LINEFA" & _
                "CT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        (CABEFACV.CONTABLE = 'F') AND " & _
                "(LTRIM(CABEFACV.SERIE) <> '6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "           " & _
                "               SELECT        'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T' THEN 'Vta." & _
                "Credito' ELSE 'Contado' END AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABEALBV.FECHA, " & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   CABEALBV.TIPOCONT, CABEALBV" & _
                ".SERIE, CABEALBV.NUMDOC, CABEALBV.CODCLI AS CLIPRO, CABEALBV.NOMCLI AS NOMBRE, L" & _
                "INEALBA.CODREP, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEALBA.CO" & _
                "DALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEALBA.PRCMONEDA, " & _
                "LINEALBA.DESC1, LINEALBA.DESC2, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                              " & _
                "     LINEALBA.DESC3, LINEALBA.DESC4, LINEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "         " & _
                "                 FROM            CABEALBV INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          " & _
                "                         LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "        " & _
                "                  WHERE        (LINEALBA.SITUACION = 'A') AND (LTRIM(CABEALBV.SE" & _
                "RIE) <> '6')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SEL" & _
                "ECT        'AC' AS TIPDOC, 'Compras' AS GRUPO, CABEALBC.IDALBC AS IDDOC, CABEALB" & _
                "C.FECHA, CABEALBC.TIPOCONT, CABEALBC.SERIE, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                  " & _
                "                 CABEALBC.NUMDOC, CABEALBC.CODPRO AS CLIPRO, CABEALBC.NOMPRO AS " & _
                "NOMBRE, LINEALBA_1.CODREP, LINEALBA_1.CODALM, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                " & _
                "                   LINEALBA_1.CODART, LINEALBA_1.DESCLIN, LINEALBA_1.UNIDADES, L" & _
                "INEALBA_1.PRCMONEDA, LINEALBA_1.DESC1, LINEALBA_1.DESC2, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "                              LINEALBA_1.DESC3, LINEALBA_1.DESC4, LINEALBA_1.BAS" & _
                "E, LINEALBA_1.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          FROM            CABEALBC INNER" & _
                " JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                                   LINEALBA AS LINEALBA_1" & _
                " ON CABEALBC.IDALBC = LINEALBA_1.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        " & _
                "(CABEALBC.SITUACION = 'A') AND (LTRIM(CABEALBC.CODPRO) <> '911')" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "              " & _
                "            UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          SELECT        'FC' AS TIPDOC, '" & _
                "Compras' AS GRUPO, CABEFACC.IDFACC AS IDDOC, CABEFACC.FECHA, CABEFACC.TIPOCONT, " & _
                "CABEFACC.SERIE, CABEFACC.NUMDOC, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                             " & _
                "      CABEFACC.CODPRO AS CLIPRO, CABEFACC.NOMPRO AS NOMBRE, LINEFACT_1.CODREP, L" & _
                "INEFACT_1.CODALM, LINEFACT_1.CODART, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                                         " & _
                "          LINEFACT_1.DESCLIN, LINEFACT_1.UNIDADES, LINEFACT_1.PRCMONEDA, LINEFAC" & _
                "T_1.DESC1, LINEFACT_1.DESC2, LINEFACT_1.DESC3, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                               " & _
                "                    LINEFACT_1.DESC4, LINEFACT_1.BASE, LINEFACT_1.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "    " & _
                "                      FROM            CABEFACC INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "                              LINEFACT AS LINEFACT_1 ON CABEFACC.IDFACC = LINEFA" & _
                "CT_1.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                          WHERE        (CABEFACC.CONTABLE = 'F') AN" & _
                "D (LTRIM(CABEFACC.CODPRO) <> '911')) AS VENTAS INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                     " & _
                "    ARTICULO ON ARTICULO.CODART = VENTAS.CODART INNER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                    " & _
                "     FAMILIAS ON ARTICULO.CODFAMEST = FAMILIAS.CODFAM AND FAMILIAS.FICHERO = 'Es" & _
                "tadis' LEFT OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         SIE_ESTRUCTURASFAMILIAARTICULO " & _
                "ON FAMILIAS.ID = SIE_ESTRUCTURASFAMILIAARTICULO.ID_FAMILIAHIJA LEFT OUTER JOIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "                         FAMILIAS AS FamiliaPadre ON FamiliaPadre.ID = SIE_ESTRU" & _
                "CTURASFAMILIAARTICULO.ID_FAMILIAPADRE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE        (YEAR(VENTAS.FECHA) = @EJERC" & _
                "ICIO) AND (MONTH(VENTAS.FECHA) = @MES) AND (VENTAS.CODALM = @CODALM) AND (FAMILI" & _
                "AS.CODFAM = @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (YEAR(VENTAS.FECHA) = @EJERCIC" & _
                "IO) AND (MONTH(VENTAS.FECHA) = @MES) AND (VENTAS.CODALM = @CODALM) AND (FamiliaP" & _
                "adre.CODFAM = @CODFAM) OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (YEAR(VENTAS.FECHA) = @EJERC" & _
                "ICIO) AND (MONTH(VENTAS.FECHA) = @MES) AND (FAMILIAS.CODFAM = @CODFAM) AND (@COD" & _
                "ALM = '') OR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         (YEAR(VENTAS.FECHA) = @EJERCICIO) AND (MO" & _
                "NTH(VENTAS.FECHA) = @MES) AND (FamiliaPadre.CODFAM = @CODFAM) AND (@CODALM = '')" & _
                ""
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODALM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODALM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODFAM", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODFAM", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT       TIPDOC, 'Compras' AS GRUPO, IDDOC, FECHA, TIPOCONT, SERIE, NUMDOC, C" & _
                "ODPRO CLIPRO, NOMBRE, CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC" & _
                "1, DESC2, DESC3, DESC4, BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AC' AS TIPDOC, CAB" & _
                "EALBC.IDALBC AS IDDOC, CABEALBC.CODPRO, CABEALBC.FECHA, TIPOCONT, SERIE, NUMDOC," & _
                " CODPRO CLIPRO, NOMPRO NOMBRE, LINEALBA.CODREP, LINEALBA.CODALM, LINEALBA.CODART" & _
                ", LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEALBA.PRCMONEDA, LINEALBA.DESC1, LINEA" & _
                "LBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, LINEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FRO" & _
                "M            CABEALBC INNER JOIN LINEALBA ON CABEALBC.IDALBC = LINEALBA.IDALBC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "WHERE CABEALBC.SITUACION = 'A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'FC' AS TIPDOC, CABEFACC" & _
                ".IDFACC AS IDDOC, CABEFACC.CODPRO, CABEFACC.FECHA, TIPOCONT, SERIE, NUMDOC, CODP" & _
                "RO CLIPRO, NOMPRO NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, LIN" & _
                "EFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT.D" & _
                "ESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM    " & _
                "        CABEFACC INNER JOIN LINEFACT ON CABEFACC.IDFACC = LINEFACT.IDFACC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE" & _
                " CONTABLE = 'F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS COMPRAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE YEAR(FECHA) = @EJERCICIO AND MONTH(FECHA) =" & _
                " @MES AND CODPRO = @CODPRO"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODPRO", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIPRO", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "CODREP, CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, DESC1, DESC2, DESC3, DESC4" & _
                ", BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT        'FV' AS TIPDOC, 'Vta.Credito'" & _
                " AS GRUPO, CABEFACV.IDFACV AS IDDOC, CABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, CO" & _
                "DCLI CLIPRO, NOMCLI NOMBRE, LINEFACT.CODREP, LINEFACT.CODALM, LINEFACT.CODART, L" & _
                "INEFACT.DESCLIN, LINEFACT.UNIDADES, LINEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT" & _
                ".DESC2, LINEFACT.DESC3, LINEFACT.DESC4, LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM  " & _
                "          CABEFACV INNER JOIN LINEFACT ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHE" & _
                "RE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT       'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T" & _
                "' THEN 'Vta.Credito' ELSE 'Contado' END AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABE" & _
                "ALBV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI CLIPRO, NOMCLI NOMBRE, LINEALBA.CODR" & _
                "EP, LINEALBA.CODALM, LINEALBA.CODART, LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEA" & _
                "LBA.PRCMONEDA, LINEALBA.DESC1, LINEALBA.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, L" & _
                "INEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEALBV INNER JOIN LINEALBA ON" & _
                " CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE LINEALBA.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "W" & _
                "HERE YEAR(FECHA) = @EJERCICIO AND MONTH(FECHA) = @MES AND CODREP = @CODREP"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CODREP", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CODREP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT     TIPDOC, IDDOC, GRUPO, FECHA, TIPOCONT, SERIE, NUMDOC, CLIPRO, NOMBRE, " & _
                "VENTAS.CODREP, VENTAS.CODALM, CODART, DESCLIN, UNIDADES, PRCMONEDA, VENTAS.DESC1" & _
                ", VENTAS.DESC2, VENTAS.DESC3, VENTAS.DESC4, BASE, PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            (" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S" & _
                "ELECT        'FV' AS TIPDOC, 'Vta.Credito' AS GRUPO, CABEFACV.IDFACV AS IDDOC, C" & _
                "ABEFACV.FECHA, TIPOCONT, SERIE, NUMDOC, CODCLI CLIPRO, NOMCLI NOMBRE, LINEFACT.C" & _
                "ODREP, LINEFACT.CODALM, LINEFACT.CODART, LINEFACT.DESCLIN, LINEFACT.UNIDADES, LI" & _
                "NEFACT.PRCMONEDA, LINEFACT.DESC1, LINEFACT.DESC2, LINEFACT.DESC3, LINEFACT.DESC4" & _
                ", LINEFACT.BASE, LINEFACT.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            CABEFACV INNER JOIN LINEFACT" & _
                " ON CABEFACV.IDFACV = LINEFACT.IDFACV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE CONTABLE='F'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "UNION ALL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT    " & _
                "   'AV' AS TIPDOC, CASE FACTURABLE WHEN 'T' THEN 'Vta.Credito' ELSE 'Contado' EN" & _
                "D AS GRUPO, CABEALBV.IDALBV AS IDDOC, CABEALBV.FECHA, TIPOCONT, SERIE, NUMDOC, C" & _
                "ODCLI CLIPRO, NOMCLI NOMBRE, LINEALBA.CODREP, LINEALBA.CODALM, LINEALBA.CODART, " & _
                "LINEALBA.DESCLIN, LINEALBA.UNIDADES, LINEALBA.PRCMONEDA, LINEALBA.DESC1, LINEALB" & _
                "A.DESC2, LINEALBA.DESC3, LINEALBA.DESC4, LINEALBA.BASE, LINEALBA.PRCMEDIO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM " & _
                "           CABEALBV INNER JOIN LINEALBA ON CABEALBV.IDALBV = LINEALBA.IDALBV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WH" & _
                "ERE LINEALBA.SITUACION='A'" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & ") AS VENTAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "LEFT JOIN CLIENTES ON CLIENTES.CODCLI =" & _
                " VENTAS.CLIPRO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE YEAR(FECHA) = @EJERCICIO AND MONTH(FECHA) = @MES AND CLIEN" & _
                "TES.RUTA = @RUTA"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EJERCICIO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RUTA", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Almacen(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODALM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODALM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Artículo(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODART As String, ByVal CODALM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODART Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODART")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODART, String)
            End If
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CODALM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function ArtículoAMM(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODART As String, ByVal CODALM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODART Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODART")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODART, String)
            End If
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CODALM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Cliente(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODCLI As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODCLI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODCLI")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODCLI, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Familia(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODALM As String, ByVal CODFAM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODALM, String)
            End If
            If (CODFAM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODFAM")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CODFAM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FamiliaAMM(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODALM As String, ByVal CODFAM As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODALM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODALM, String)
            End If
            If (CODFAM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODFAM")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CODFAM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Proveedor(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODPRO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODPRO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CODPRO")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODPRO, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Representante(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal CODREP As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (CODREP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CODREP, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function Ruta(ByVal dataTable As dsEstadisticas.DETALLE_VENTASDataTable, ByVal EJERCICIO As Decimal, ByVal MES As Decimal, ByVal RUTA1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(EJERCICIO, Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(MES, Decimal)
            If (RUTA1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(RUTA1, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsEstadisticas, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsEstadisticas, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsEstadisticas, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsEstadisticas) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
